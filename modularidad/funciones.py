# Definiendo una funci√≥n
from functools import reduce


def say_hello():
    print("Hello üëå")


# Invocar una funci√≥n

say_hello()


# Retornar un valor: Devuelven un valor
def one():
    return 1


result = one()
print(result)

# Podemos asignar la funci√≥n a una variable
value = one()
print(value)

if one() == 1:
    print("It works")
else:
    print("Something is broken")


# Si una funci√≥n no incluye 'return' devuelve None
def empty():
    x = 0
    # return None


print(empty())


# return a secas, hace que salgamos de la funci√≥n
def quick():
    return


print(quick())

"""
Retornando m√∫ltiples valores:
"""


def multiple():
    return 0, 1  # is a tuple!


result = multiple()
print(result)
print(type(result))

# Aplicando el desempaquetado de tuplas o destructuraci√≥n
a, b = multiple()
print(a)
print(b)

"""
P√°rametros y argumentos: Si una funci√≥n no dispusiera de valores de entrada, su comportamiento quedar√≠a muy limitado. Es por ello que los par√°metros permiten variar los datos que consume una funci√≥n para obtener distintos resultados.
"""


# Par√°metro de la funci√≥n: value
def sqrt(value):
    return value ** (1 / 2)


# Argumento de la funci√≥n: 4
print(sqrt(4))


def _min(a, b):
    if a < b:
        return a
    else:
        return b


print(_min(7, 9))


# Teniendo en cuenta que la sentencia return finaliza la ejecuci√≥n de la funci√≥n
# es viable eliminar la sentence else
def _SecondMin(a, b):
    if a < b:
        return a
    return b


print(_SecondMin(4, 2))

"""
Argumentos posicionales: Los argumentos posicionales son aquellos argumentos que se copian en sus correspondientes par√°metros por orden de escritura.
"""


def build_cpu(vendor, num_cores, freq):
    return dict(vendor=vendor, num_cores=num_cores, freq=freq)


print(build_cpu("AMD", 8, 2.7))

"""
Argumentos nominales: 
Los argumentos no son copiados en un orden espec√≠fico sino que se asignan por nombre a cada p√°rametro. Para utilizarlo, basta con realizar la asignaci√≥n de cada argumento en la propia llamada a la funci√≥n.
"""
# El orden de los argumentos no influyen en el resultado final.
print(build_cpu(vendor="AMD", num_cores=8, freq=2.7))
print(build_cpu(freq=2.7, vendor="AMD", num_cores=8))

# Se puede mezclar, los posicionales van antes que los nominales
print(build_cpu("INTEL", num_cores=4, freq=3.1))

"""
Argumentos mutables e inmutables:
Cuando realizamos modificaciones a los argumentos de una funci√≥n es importante tener en cuenta si son mutables (listas, diccionarios, conjuntos, ...) o inmutables (tuplas, enteros, flotantes, cadenas de texto, ...).
"""
values = [2, 3, 4]


def square_it(values):
    # NO HACER ESTO ‚úñÔ∏è
    for i in range(len(values)):
        values[i] **= 2
    return values


print(square_it(values))

"""
Par√°metros por defecto:
Es posible especificar valores por defecto en los par√°metros de una funci√≥n. En el caso de que no se proporcione un valor al argumento en la llamada a la funci√≥n, el par√°metro correspondiente tomar√° el valor definido por defecto.
"""


def build_cpu(vendor, num_cores, freq=2.0):
    return dict(vendor=vendor, num_cores=num_cores, freq=freq)


# Llamada a la funci√≥n sin especificar el argumento freq
print(build_cpu("INTEL", 2))

# Lllamada a la funci√≥n especificando el argumento freq
print(build_cpu("INTEL", 2, freq=3.4))

# Los valores por defecto en los par√°metros se calculan cuando se define la
# funci√≥n, no cuando se ejecuta la funci√≥n

DEFAULT_FREQ = 2.0


def build_cpu(vendor, num_cores, freq=DEFAULT_FREQ):
    return dict(vendor=vendor, num_cores=num_cores, freq=freq)


print(build_cpu("AMD", 4))

DEFAULT_FREQ = 3.5

print(build_cpu("AMD", 4))

"""
Modificar par√°metros mutables:
"""


""" def buggy(arg, result=[]):
    result.append(arg)
    print(result) """


def nonbuggy(arg, result=None):
    if result is None:
        result = []
    result.append(arg)
    print(result)


nonbuggy("a")
nonbuggy("b")
nonbuggy("a", ["x", "y", "z"])
nonbuggy("b", ["x", "y", "z"])

"""
Empaquetar / Desempaquetar argumentos:
"""

values = (4, 3, 2, 1)


# Empaquetar argumentos posicionales: *
def _sum(*values):
    print(f"{values=}")
    result = 0
    for value in values:
        result += value
    return result


print(_sum(4, 3, 2, 1))

# Desempaquetar argumentos posicionales: *
print(_sum(*values))

"""
Empaquetar / Desempaquetar argumentos: Par√°metros nominales
"""

marks = {"ana": 8, "antonio": 6, "inma": 9, "javier": 7}


# Empaquetar argumentos nominales:  **
def best_student(**marks):
    print(f"{marks=}")
    max_mark = -1
    for student, mark in marks.items():  # marks es un diccionario
        if mark > max_mark:
            max_mark = mark
            best_student = student
    return best_student


best_student(ana=8, antonio=6, inma=9, javier=7)

# Desempaquetar argumentos nominales:  **
best_student(**marks)

"""
CONVENCIONES: 
En muchas ocasiones se utiliza args como nombre de par√°metro para argumentos posicionales y kwargs como nombre de par√°metro para argumentos nominales.
"""


def func(*args, **kwargs):
    # TODO
    pass


"""
Forzado modo de paso de argumentos:
"""


# Argumentos s√≥lo nominales: La definici√≥n de los par√°metros de la funci√≥n sean
# pasados s√≥lo por nombre
def sum_power(a, b, *, power=False):
    if power:
        a **= 2
        b **= 2
    return a + b


print(sum_power(3, 4))
print(sum_power(a=3, b=4))
print(sum_power(3, 4, power=True))

# Argumentos solo posicionales: Obligar a que determinados par√°metros sean
# pasados por posici√≥n
# / : Separador para espec√≠ficar que par√°metros posicionales.


def sum_power(a, b, /, power=False):
    if power:
        a **= 2
        b **= 2
    return a + b


result1 = sum_power(3, 4)
result2 = sum_power(3, 4, power=True)
result3 = sum_power(3, 4, True)

print(result1)
print(result2)
print(result3)

"""
Fijando argumentos posicionales y nominales:

Podemos forzar a que una funci√≥n reciba argumentos de un modo concreto.
"""


def sum_power(a, b, /, *, power=False):
    if power:
        a **= 2
        b **= 2
    return a + b


print(sum_power(3, 2, power=True))

"""
Funciones como par√°metros:
Las funciones se pueden utilzar en cualquier contexto del programa. Son objetos que pueden ser asignados a variables, usados en expresiones, devueltos como valores de retorno o pasados como argumentos a otras funciones.
"""


def success():
    print("Yeah!")


print(type(success))


def doit(fn):
    fn()


# Pasando funcines como argumentos
doit(success)


def repeat_please(text, time=1):
    return text * time


print(type(repeat_please))


def second_doit(fn, arg1, arg2):
    return fn(arg1, arg2)


print(second_doit(repeat_please, "Function as params ", 4))

"""
DOCUMENTACI√ìN:
"""


def sqrt(value):
    "Return the square root of the value."
    return value ** (1 / 2)


# La forma m√°s ortodoxa de escribir un docstring es con triple comillas


def closest_int(value):
    """Returns the closest integer to the given value.
    The operation is:
        1. Compute distance to floor.
        2. If distance less than a half, return floor.
           Otherwise, return ceil.
    """
    floor = int(value)
    if value - floor < 0.5:
        return floor
    else:
        return floor + 1


# Para ver el docstring de una funci√≥n, basta con utilizar help()
help(closest_int)

# Extraer informaci√≥n usando el s√≠mbolo ?

# closest_int?

"""
Anotaci√≥n de tipos: Las anotaciones de tipo o type-hints permiten indicar tipos para los par√°metros de una funci√≥n y/o para su valor de retorno (tambi√©n funciona para variables).
"""


def ssplit(text: str, split_pos: int) -> tuple:
    return text[:split_pos], text[split_pos:]


print(ssplit("Always remember us this way", 15))

"""
Valores por defecto: Cuando usamos anotaciones de tipos tambi√©n podemos indicar un valor por defecto para los par√°metros.

Las anotaciones de tipos son una herramienta muy potente, permite complementar la documentaci√≥n de nuestro c√≥digo y aclarar ciertos aspectos. 
"""


def ssplit(text: str, split_pos: int = -1) -> tuple:
    if split_pos == -1:
        split_pos = len(text)
    return text[:split_pos], text[split_pos:]


print(ssplit("Always remember us this way"))

"""
N√∫mero indefinido:
Cuando trabajamos con par√°metros que representan un n√∫mero indefinido de valores, las anotaciones de tipo s√≥lo hacen referencia al tipo que contiene la tupla, no es necesario indicar que es una tupla.
"""


def _max(*args: int | float):
    pass


"""
TIPOS DE FUNCIONES: 
Funciones lambda: Las funciones lambda son funciones an√≥nimas que se definen en una sola l√≠nea. Se utilizan para crear funciones peque√±as y simples de forma r√°pida y concisa.
"""


def num_words(t): return len(t.split())


print(type(num_words))
print(num_words)
print(num_words("Hi my friend, how are you? üñêÔ∏è"))


def logic_and(x, y): return x & y


for i in range(2):
    for j in range(2):
        print(f"{i} & {j} = {logic_and(i, j)}")

# Lambdas como argumentos

geoloc = (
    (15.623037, 13.258358),
    (55.147488, -2.667338),
    (54.572062, -73.285171),
    (3.152857, 115.327724),
    (-40.454262, 172.318877),
)

print(sorted(geoloc))

print(sorted(geoloc, key=lambda t: t[1]))

"""
Enfoque funcional: El enfoque funcional es un paradigma de programaci√≥n que se basa en el uso de funciones puras y evita el uso de efectos secundarios. En este enfoque, las funciones son tratadas como ciudadanos de primera clase y se pueden pasar como argumentos, devolver como valores y almacenar en variables.
"""

# map(): Devuelve un generador, por lo tanto hay que convertirlo
# a una lista o iterable para ver los resultados.
# Aplica otra funci√≥n sobre cada elemento de un iterable.


def f(x):
    return x**2 / 2


data = range(1, 11)

map_gen = map(f, data)
print(type(map_gen))

print(f"map:", list(map_gen))

# Mismo resultado aplicando una funci√≥n an√≥nima

print(list(map(lambda x: x**2 / 2, data)))

# Mismo resultado aplicando una lista por comprensi√≥n
print([x**2 / 2 for x in data])

# filter(): Selecciona aquellos elementos de un iterable que cumplen
# una determinada condici√≥n.
# tambi√©n devuelve un generador, por lo tanto hay que convertirlo
# a una lista o iterable para ver los resultados.


def odd_number(x: int) -> int:
    return x % 2 == 1


data2 = range(1, 21)

filter_gen = filter(odd_number, data2)

print(type(filter_gen))

print(f"filter:", list(filter_gen))

print(list(filter(lambda x: x % 2 == 1, data)))
print([x for x in data if x % 2 == 1])

"""
reduce(): Permite reducir una funci√≥n sobre un conjunto de valores. 
Para poder usar la funci√≥n reduce es necesario importar el m√≥dulo functools
"""


def mult_values(a, b):
    return a * b


data = range(1, 6)

print(reduce(mult_values, data))

# Aplicando una funci√≥n lambda
print(reduce(lambda x, y: x * y, data))

"""
GENERADORES:
Un generador se encarga de generar valores que permita tratarlos de manera individual (y aislada). 

Existen dos implementaciones de generadores:
- Funciones generadoras.
- Expresiones generadoras.
"""


# Funciones generadoras: incorporar la sentencia yield
# Devuelve un valor indicado, y a la vez, congela el estado de la funci√≥n
def evens(lim: int):
    for i in range(0, lim + 1, 2):
        yield i


print(type(evens))

evens_gen = evens(20)  # devuelve un generador.

print(type(evens_gen))

# Una vez creado el generador, ya permite iterar sobre el
for even in evens(20):
    print(even, end=" ")

"""
Expresiones generadoras:
Una expresi√≥n generadora es similar a la lista por comprensi√≥n, s√≥lo que se utiliza par√©ntesis en vez de corchetes.
"""

evens_gen = (i for i in range(0, 20, 2))
print(type(evens_gen))

for i in evens_gen:
    print(i, end=" ")

# Una expresi√≥n generadora se puede explicitar
print("---- EXPRESI√ìN GENERADORA EXPLICITAMENTE ----")
print(f"LIST:", list(i for i in range(0, 20, 2)))
print(f"SUM:", sum(i for i in range(0, 20, 2)))
print(f"MIN:", min(i for i in range(0, 20, 2)))
print(f"MAX:", max(i for i in range(0, 20, 2)))
print(f"SORTED:", sorted(i for i in range(0, 20, 2)))

"""
Funciones Interiores:
Est√° permitido definir funciones dentro de otra funci√≥n. Es lo que se conoce como funci√≥n interior.
"""


def get_words_with_all_vowels(text: str) -> list[str]:
    VOWELS = "aeiou"

    def get_unique_vowels(word: str) -> set[str]:
        return set(c for c in word if c in VOWELS)

    result = []
    for word in text.split():
        if len(get_unique_vowels(word)) == len(VOWELS):
            result.append(word)
    return result


print(get_words_with_all_vowels("La euforia de ver el riachuelo fue inmensa"))

"""
Clausuras:
Una clausura (closure) establece el uso de una funci√≥n interior que se genera din√°micamente y recuerda los valores de los argumentos con los que fue creada.

En una clausura retomamos una funci√≥n, no una llamada a una funci√≥n. Es por esto que se dice que una clausura es una factoria de funciones.
"""


def make_multiplier_of(n: int):
    def multiplier(x: int) -> int:
        return x * n

    return multiplier


m3 = make_multiplier_of(3)
print(type(m3))
print(m3(7))

m5 = make_multiplier_of(5)
print(type(m5))
print(m5(8))

# Llamada directa
print(make_multiplier_of(10)(11))

"""
Decoradores:
Un decorador es una funci√≥n que recibe como par√°metro una funci√≥n y devuelve otra funci√≥n.
"""

# Esqueleto b√°sico de un decorador


def my_decorator(func):  # Nombre del decorador
    def wrapper(*args, **kwargs):  # Funci√≥n interior
        return func(*args, **kwargs)  # argumentos posicionales y nominales

    return wrapper


def res2bin(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return bin(result)

    return wrapper


# Definiendo una funci√≥n ordinaria
def power(x: int, n: int) -> int:
    return x**n


print(power(2, 3))
print(power(4, 5))

# Aplicando el decorador
decorated_power = res2bin(power)

print(decorated_power(2, 3))
print(decorated_power(4, 5))

"""
Usando @ para decorar:
Python ofrece una sintaxis par simplificar la aplicaci√≥n de los decoradores a trav√©s del operador @ justo antes de la definici√≥n de la funci√≥n.
"""


@res2bin
def power(x: int, n: int) -> int:
    return x**n


print(power(5, 2))
print(power(10, 2))

"""
Manipulando argumentos:
"""


def assert_int(func):
    def wrapper(value1: int, value2: int, /) -> int | float | None:
        if isinstance(value1, int) and isinstance(value2, int):
            return func(value1, value2)
        return None

    return wrapper


# Aplicando el decorador
@assert_int
def add(a, b):
    return a + b


print(add(3, 4))
# print(add(5, 'a')) # error ‚úñÔ∏è
# print(add('a', 'b')) # error ‚úñÔ∏è

"""
Multiples decoradores: 
Permite aplicar m√°s de un decorador a cada funci√≥n.
"""


def plus5(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return result + 5

    return wrapper


def div2(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return result // 2

    return wrapper


@plus5
@div2
def prod(a, b):
    return a * b


result_prod = prod(4, 3)

print(result_prod)
print(((4 * 3) // 2) + 5)

"""
Funciones recursivas:
La recursividad es el mecanismo por el cual una funci√≥n se llama a s√≠ misma.
"""


def call_me():
    return call_me()


def pow(base: int, exponent: int) -> int:
    if exponent == 0:
        return 1
    # Recursividad
    return base * pow(base, exponent - 1)


print(pow(2, 4))
print(pow(3, 5))

"""
Funcionitis: Es una inflamaci√≥n en la zonal funcional, por querer aplicar funciones donde no es necesario.
"""


def inList(item: int, items: list[int]) -> bool:
    return item in items


print(inList(1, [1, 2, 3]))

print(1 in [1, 2, 3])  # That easy!

"""
Espacios de nombres:
Los espacios de nombres permite definir √°mbitos o contextos en los que agrupar nombres de objetos. Proporcionan un mecanismo de empaquetado.
"""

# Acceso a variables globales: Acceder desde cualquier parte
language = "castellano"


def catalonia():
    print(f"{language=}")


print(language)

catalonia()

# Creando variables locales
language2 = "ingles"


def english():
    language2 = "catalan"
    print(f"{language2=}")


print(language2)
english()
print(language2)

"""
Forzando modificaci√≥n global: Python permite modificar una variable definida en un espacio de nombres global dentro de una funci√≥n. Para ello debemos usar el modificador 'global'. ‚úñÔ∏è NO SE CONSIDERA UNA BUENA PR√ÅCTICA

globals(): Devuelve un diccionario con los contenidos del espacio de nombres global.
"""

language = "castellano"


def catalonia():
    global language
    language = "catalan"
    print(f"{language=}")


print(language)

catalonia()

print(language)

# Contenido de los espacios de nombres
language = "english"


def catalonia2():
    language = "catalan"
    print(f"{locals()=}")


catalonia2()
